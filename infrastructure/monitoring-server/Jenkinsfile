pipeline {
    agent any
    environment {
        REMOTE_USER = 'locthp'
        REMOTE_SERVER = '172.16.1.215'
        SSH_CREDENTIALS_ID = 'monitoring-host-ssh'
        GIT_REPO_URL = 'https://github.com/TruongHoangPhuLoc/home-lab.git'
        TARGET_DIR = '$(pwd)/home-lab'
    }
    stages {
        stage('Initalization') {
            when {
                expression{
                        params.Is_First_Initialization
                }
            }
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    script {
                        sh '''
                        echo Setting remote connection...
                        set +e 
                        ssh -o StrictHostKeyChecking=yes ${REMOTE_USER}@${REMOTE_SERVER} "exit"
                        if [ $? -ne 0 ]; then
                            mkdir -p ~/.ssh
                            ssh-keyscan -H ${REMOTE_SERVER} >> ~/.ssh/known_hosts
                        fi
                        set -e
                        echo Remote connection settings have been completed !!!
                        echo Deploying Monitoring Stack for the first time...
                        ssh $REMOTE_USER@$REMOTE_SERVER "source .secret-env-exporting.sh && git clone ${GIT_REPO_URL}  && cd ${TARGET_DIR}/infrastructure/monitoring-server/configuration/ && docker compose up -d"
                        echo Deploying process finished !!!
                        '''
                    }

                }
            }
        }
        stage('SSH-To-Monitoring-Host-And-CheckOut') {
            when{
                expression{
                    params.Is_First_Initialization == false
                }
            }
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    script {
                        sh '''
                        ssh ${REMOTE_USER}@${REMOTE_SERVER} "cd ${TARGET_DIR} && git pull"
                        '''
                    }
                    
                }
            }
        }
        stage('Reload_Configuration') {
            when {
                expression{
                        params.Is_First_Initialization == false
                }
                anyOf {
                    changeset "**/monitoring-server/configuration/prometheus/alert_rules/**"
                    changeset "**/monitoring-server/configuration/prometheus/recording_rules/**"
                    changeset "**/monitoring-server/configuration/prometheus/prometheus.yml"
                }
            }
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    script {
                        sh '''
                        ssh ${REMOTE_USER}@${REMOTE_SERVER} "curl -X POST http://localhost:9090/-/reload > /dev/null 2>&1"
                        '''
                    }
                }
            }
        }
        stage('Re-Deploy_Monitoring_Stack') {
            when {
                allOf{
                    changeset "**/monitoring-server/configuration/docker-compose.yml"
                    expression{
                        params.Is_First_Initialization == false
                    }
                }
            }
            steps {
                sshagent([SSH_CREDENTIALS_ID]) {
                    script{
                        sh '''
                        ssh ${REMOTE_USER}@${REMOTE_SERVER} "source .secret-env-exporting.sh && cd ${TARGET_DIR}/infrastructure/monitoring-server/configuration/ && docker compose up -d --force-recreate > /dev/null 2>&1" 
                        #ssh $REMOTE_USER@$REMOTE_SERVER "source .secret-env-exporting.sh && docker compose -f <(curl -sL $GITHUB_URL_COMPOSE ) up -d --force-recreate"
                        '''
                    }
                }
            }
        }
    }
}