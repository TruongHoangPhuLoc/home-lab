{{- /*gotype: github.com/nginxinc/kubernetes-ingress/internal/configs/version2.TransportServerConfig*/ -}}
{{- range $u := .Upstreams }}
upstream {{ $u.Name }} {
    zone {{ $u.Name }} 512k;
    {{- if $u.LoadBalancingMethod }}
    {{ $u.LoadBalancingMethod }};
    {{- end }}

    {{- range $s := $u.Servers }}
    server {{ $s.Address }} max_fails={{ $s.MaxFails }} fail_timeout={{ $s.FailTimeout }} max_conns={{ $s.MaxConnections }}{{ if $u.Resolve }} resolve{{ end }};
    {{- end }}

    {{- range $b := $u.BackupServers }}
    server {{ $b.Address }} resolve backup;
    {{- end }}
}
{{- end }}

{{- range $snippet := .StreamSnippets }}
{{ $snippet }}
{{- end }}

{{ with $m := .Match }}
match {{ $m.Name }} {
    {{ if $m.Send }}
    send "{{ $m.Send }}";
    {{ end }}

    {{ if $m.Expect }}
    expect {{ $m.ExpectRegexModifier }} "{{ $m.Expect }}";
    {{ end }}
}
{{- end }}

{{- $s := .Server }}
server {
    {{- with $ssl := $s.SSL }}
        {{- if $s.TLSPassthrough }}
    listen {{ $s.UnixSocket }} proxy_protocol;
    set_real_ip_from unix:;
        {{- else }}
    listen {{ $s.Port }}{{ if $ssl.Enabled }} ssl{{ end }}{{ if $s.UDP }} udp{{ end }};
    {{if not $s.DisableIPV6}}listen [::]:{{ $s.Port }}{{ if $ssl.Enabled }} ssl{{ end }}{{ if $s.UDP }} udp{{ end }};{{end}}
        {{- end }}

        {{- if $ssl.Enabled }}
    ssl_certificate {{ makeSecretPath $ssl.Certificate $.StaticSSLPath "$secret_dir_path" $.DynamicSSLReloadEnabled }};
	ssl_certificate_key {{ makeSecretPath $ssl.CertificateKey $.StaticSSLPath "$secret_dir_path" $.DynamicSSLReloadEnabled }};
	    {{- end }}
    {{- end }}

    status_zone {{ $s.StatusZone }};

    {{- if $s.ProxyRequests }}
    proxy_requests {{ $s.ProxyRequests }};
    {{- end }}
    {{- if $s.ProxyResponses }}
    proxy_responses {{ $s.ProxyResponses }};
    {{- end }}

    {{- range $snippet := $s.ServerSnippets }}
    {{ $snippet }}
    {{- end }}

    proxy_pass {{ $s.ProxyPass }};

    {{ if $s.HealthCheck }}
    health_check interval={{ $s.HealthCheck.Interval }} {{ if $s.HealthCheck.Port }} port={{ $s.HealthCheck.Port }}{{ end }}
        passes={{ $s.HealthCheck.Passes }} jitter={{ $s.HealthCheck.Jitter }} fails={{ $s.HealthCheck.Fails }}{{ if $s.UDP }} udp{{ end }}{{ if $s.HealthCheck.Match }} match={{ $s.HealthCheck.Match }}{{ end }};
    health_check_timeout {{ $s.HealthCheck.Timeout }};
    {{ end }}

    proxy_timeout {{ $s.ProxyTimeout }};
    proxy_connect_timeout {{ $s.ProxyConnectTimeout }};

    {{- if $s.ProxyNextUpstream }}
    proxy_next_upstream on;
    proxy_next_upstream_timeout {{ $s.ProxyNextUpstreamTimeout }};
    proxy_next_upstream_tries {{ $s.ProxyNextUpstreamTries }};
    {{- end }}
}
